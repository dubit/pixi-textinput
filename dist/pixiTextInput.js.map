{"version":3,"file":"pixiTextInput.js","sources":["../src/input.js","../src/button.js"],"sourcesContent":["import * as PIXI from 'pixi.js'\n\n\nexport class TextInput extends PIXI.Container {\n\n    constructor (styles) {\n        super ();\n        this._input_style = Object.assign (\n            {\n                position : 'absolute',\n                background : 'none',\n                border : 'none',\n                outline : 'none',\n                transformOrigin : '0 0',\n                lineHeight : '1',\n                rows: 1,\n                display: 'none'\n            },\n            styles.input\n        );\n\n        if (styles.box) {\n            this._box_generator = typeof styles.box === 'function' ? styles.box : new DefaultBoxGenerator (styles.box)\n        } else {\n            this._box_generator = null;\n        }\n        if (this._input_style.hasOwnProperty ('multiline')) {\n            this._multiline = !!this._input_style.multiline;\n            delete this._input_style.multiline\n        } else {\n            this._multiline = false;\n        }\n\n        this._box_cache = {};\n        this._previous = {};\n        this._dom_added = false;\n        this._dom_visible = true;\n        this._placeholder = '';\n        this._placeholderColor = 0xa9a9a9;\n        this._selection = [0, 0];\n        this._restrict_value = '';\n        this._createDOMInput ();\n        this.substituteText = true;\n        this._setState ('DEFAULT');\n        this._addListeners ()\n    }\n\n\n    // GETTERS & SETTERS\n\n    get substituteText () {\n        return this._substituted\n    }\n\n    set substituteText (substitute) {\n        if (this._substituted == substitute)\n            return\n\n        this._substituted = substitute\n\n        if (substitute) {\n            this._createSurrogate ()\n            this._dom_visible = false\n        } else {\n            this._destroySurrogate ()\n            this._dom_visible = true\n        }\n        this.placeholder = this._placeholder\n        this._update ()\n    }\n\n    get placeholder () {\n        return this._placeholder\n    }\n\n    set placeholder (text) {\n        this._placeholder = text\n        if (this._substituted) {\n            this._updateSurrogate ()\n            this._dom_input.placeholder = ''\n        } else {\n            this._dom_input.placeholder = text\n        }\n    }\n\n    get disabled () {\n        return this._disabled\n    }\n\n    set disabled (disabled) {\n        this._disabled = disabled\n        this._dom_input.disabled = disabled\n        this._setState (disabled ? 'DISABLED' : 'DEFAULT')\n    }\n\n    get maxLength () {\n        return this._max_length\n    }\n\n    set maxLength (length) {\n        this._max_length = length\n        this._dom_input.setAttribute ('maxlength', length)\n    }\n\n    get restrict () {\n        return this._restrict_regex\n    }\n\n    set restrict (regex) {\n        if (regex instanceof RegExp) {\n            regex = regex.toString ().slice (1, -1)\n\n            if (regex.charAt (0) !== '^')\n                regex = '^' + regex\n\n            if (regex.charAt (regex.length - 1) !== '$')\n                regex = regex + '$'\n\n            regex = new RegExp (regex)\n        } else {\n            regex = new RegExp ('^[' + regex + ']*$')\n        }\n\n        this._restrict_regex = regex\n    }\n\n    get text () {\n        return this._dom_input.value\n    }\n\n    set text (text) {\n        this._dom_input.value = text\n        if (this._substituted) this._updateSurrogate ()\n    }\n\n    get htmlInput () {\n        return this._dom_input\n    }\n\n    focus () {\n        if (this._substituted && !this.dom_visible)\n            this._setDOMInputVisible (true)\n\n        this._dom_input.focus ()\n\n    }\n\n    blur () {\n        this._dom_input.blur ()\n    }\n\n    select () {\n        this.focus ()\n        this._dom_input.select ()\n    }\n\n    setInputStyle (key, value) {\n        this._input_style[key] = value\n        this._dom_input.style[key] = value\n\n        if (this._substituted && (key === 'fontFamily' || key === 'fontSize'))\n            this._updateFontMetrics ()\n\n        if (this._last_renderer)\n            this._update ()\n    }\n\n    destroy (options) {\n        if (this._dom_input) this._dom_input.remove();\n\n        this._destroyBoxCache ()\n        super.destroy (options)\n    }\n\n\n    // SETUP\n\n    _createDOMInput () {\n        if (this._multiline) {\n            this._dom_input = document.createElement ('textarea');\n            this._dom_input.style.resize = 'none';\n            this._dom_input.rows = this._input_style.rows;\n        } else {\n            this._dom_input = document.createElement ('input')\n            this._dom_input.type = 'text';\n            this._dom_input.spellcheck = 'true';\n        }\n\n        for (let key in this._input_style) {\n            this._dom_input.style[key] = this._input_style[key]\n        }\n    }\n\n    _addListeners () {\n        this.once ('added', this._onAdded.bind (this))\n        this.once ('removed', this._onRemoved.bind (this))\n        this._dom_input.addEventListener ('input', this._onInputInput.bind (this))\n        this._dom_input.addEventListener ('keydown', this._onInputKeyDown.bind (this))\n        this._dom_input.addEventListener ('keyup', this._onInputKeyUp.bind (this))\n        this._dom_input.addEventListener ('focus', this._onFocused.bind (this))\n        this._dom_input.addEventListener ('blur', this._onBlurred.bind (this))\n    }\n\n    _onInputKeyDown (e) {\n        if (!this._dom_added) {\n            document.body.appendChild(this._dom_input);\n            this._dom_input.style.display = 'none';\n            this._dom_added = true;\n        }\n\n        // Prevent scrolling and entering new lines if multiline is enabled but overflow is hidden\n        if (this._dom_input.style.multiline && this._dom_input.style.overflow == 'hidden' && e.keyCode == 13) {\n            e.preventDefault();\n            return false;\n        }\n\n        this._selection = [\n            this._dom_input.selectionStart,\n            this._dom_input.selectionEnd\n        ]\n\n        this.emit ('keydown', e.keyCode)\n    }\n\n    _onInputInput (e) {\n        if (this._substituted)\n            this._updateSubstitution ();\n\n        this.emit ('input', this.text);\n    }\n\n    _onInputKeyUp (e) {\n        this.emit ('keyup', e.keyCode)\n    }\n\n    _onFocused () {\n        this._setState ('FOCUSED')\n        this.emit ('focus')\n    }\n\n    _onBlurred () {\n        this._setState ('DEFAULT')\n        this.emit ('blur')\n    }\n\n    _onAdded () {\n        requestAnimationFrame(() => {\n            if (!this.parent) return;\n            document.body.appendChild(this._dom_input)\n            this._dom_input.style.display = 'none'\n            this._dom_added = true\n        });\n    }\n\n    _onRemoved () {\n        this._dom_input.remove();\n        this._dom_added = false\n    }\n\n    _setState (state) {\n        this.state = state\n        this._updateBox ()\n        if (this._substituted)\n            this._updateSubstitution ()\n    }\n\n\n    // RENDER & UPDATE\n\n    // for pixi v4\n    renderWebGL (renderer) {\n        super.renderWebGL (renderer)\n        this._renderInternal (renderer)\n    }\n\n    // for pixi v4\n    renderCanvas (renderer) {\n        super.renderCanvas (renderer)\n        this._renderInternal (renderer)\n    }\n\n    // for pixi v5\n    render (renderer) {\n        super.render (renderer)\n        this._renderInternal (renderer)\n    }\n\n    _renderInternal (renderer) {\n        this._resolution = renderer.resolution\n        this._last_renderer = renderer\n        this._canvas_bounds = this._getCanvasBounds ()\n        if (this._needsUpdate ())\n            this._update ()\n    }\n\n    _update () {\n        this._updateDOMInput ()\n        if (this._substituted) this._updateSurrogate ()\n        this._updateBox ()\n    }\n\n    _updateBox () {\n        if (!this._box_generator)\n            return\n\n        if (this._needsNewBoxCache ())\n            this._buildBoxCache ()\n\n        if (this.state == this._previous.state\n            && this._box == this._box_cache[this.state])\n            return\n\n        if (this._box)\n            this.removeChild (this._box)\n\n        this._box = this._box_cache[this.state]\n        this.addChildAt (this._box, 0)\n        this._previous.state = this.state\n    }\n\n    _updateSubstitution () {\n        if (this.state === 'FOCUSED') {\n            this._dom_visible = true\n            this._surrogate.visible = this.text.length === 0\n        } else {\n            this._dom_visible = false\n            this._surrogate.visible = true\n        }\n        this._updateDOMInput ()\n        this._updateSurrogate ()\n    }\n\n    _updateDOMInput () {\n        if (!this._canvas_bounds)\n            return\n\n        this._dom_input.style.top = this._canvas_bounds.top + 'px'\n        this._dom_input.style.left = this._canvas_bounds.left + 'px'\n        this._dom_input.style.transform = this._pixiMatrixToCSS (this._getDOMRelativeWorldTransform ())\n        this._dom_input.style.opacity = this.worldAlpha\n        this._setDOMInputVisible (this.worldVisible && this._dom_visible)\n\n        this._previous.canvas_bounds = this._canvas_bounds\n        this._previous.world_transform = this.worldTransform.clone ()\n        this._previous.world_alpha = this.worldAlpha\n        this._previous.world_visible = this.worldVisible\n    }\n\n    _applyRestriction () {\n        if (this._restrict_regex.test (this.text)) {\n            this._restrict_value = this.text\n        } else {\n            this.text = this._restrict_value\n            this._dom_input.setSelectionRange (\n                this._selection[0],\n                this._selection[1]\n            )\n        }\n    }\n\n\n    // STATE COMPAIRSON (FOR PERFORMANCE BENEFITS)\n\n    _needsUpdate () {\n        return (\n            !this._comparePixiMatrices (this.worldTransform, this._previous.world_transform)\n            || !this._compareClientRects (this._canvas_bounds, this._previous.canvas_bounds)\n            || this.worldAlpha != this._previous.world_alpha\n            || this.worldVisible != this._previous.world_visible\n        )\n    }\n\n    _needsNewBoxCache () {\n        let input_bounds = this._getDOMInputBounds ()\n        return (\n            !this._previous.input_bounds\n            || input_bounds.width != this._previous.input_bounds.width\n            || input_bounds.height != this._previous.input_bounds.height\n        )\n    }\n\n\n    // INPUT SUBSTITUTION\n\n    _createSurrogate () {\n        this._surrogate_hitbox = new PIXI.Graphics ()\n        this._surrogate_hitbox.alpha = 0\n        this._surrogate_hitbox.interactive = true\n        this._surrogate_hitbox.cursor = 'text'\n        this._surrogate_hitbox.on ('pointerdown', this._onSurrogateFocus.bind (this))\n        this.addChild (this._surrogate_hitbox)\n\n        this._surrogate_mask = new PIXI.Graphics ()\n        this.addChild (this._surrogate_mask)\n\n        this._surrogate = new PIXI.Text ('', {})\n        this.addChild (this._surrogate)\n\n        this._surrogate.mask = this._surrogate_mask\n\n        this._updateFontMetrics ()\n        this._updateSurrogate ()\n    }\n\n    _updateSurrogate () {\n        let padding = this._deriveSurrogatePadding ()\n        let input_bounds = this._getDOMInputBounds ()\n\n        this._surrogate.style = this._deriveSurrogateStyle ()\n        this._surrogate.style.padding = Math.max.apply (Math, padding)\n        this._surrogate.y = this._multiline ? padding[0] : (input_bounds.height - this._surrogate.height) / 2\n        this._surrogate.x = padding[3]\n        this._surrogate.text = this._deriveSurrogateText ()\n\n        this._updateSurrogateHitbox (input_bounds)\n        this._updateSurrogateMask (input_bounds, padding)\n    }\n\n    _updateSurrogateHitbox (bounds) {\n        this._surrogate_hitbox.clear ()\n        this._surrogate_hitbox.beginFill (0)\n        this._surrogate_hitbox.drawRect (0, 0, bounds.width, bounds.height)\n        this._surrogate_hitbox.endFill ()\n        this._surrogate_hitbox.interactive = !this._disabled\n    }\n\n    _updateSurrogateMask (bounds, padding) {\n        this._surrogate_mask.clear ()\n        this._surrogate_mask.beginFill (0)\n        this._surrogate_mask.drawRect (padding[3], 0, bounds.width - padding[3] - padding[1], bounds.height)\n        this._surrogate_mask.endFill ()\n    }\n\n    _destroySurrogate () {\n        if (!this._surrogate) return\n\n        this.removeChild (this._surrogate)\n        this.removeChild (this._surrogate_hitbox)\n\n        this._surrogate.destroy ()\n        this._surrogate_hitbox.destroy ()\n\n        this._surrogate = null\n        this._surrogate_hitbox = null\n    }\n\n    _onSurrogateFocus () {\n        this._setDOMInputVisible (true)\n        //sometimes the input is not being focused by the mouseclick\n        setTimeout (this._ensureFocus.bind (this), 10)\n    }\n\n    _ensureFocus () {\n        if (!this._hasFocus ())\n            this.focus ()\n    }\n\n    _deriveSurrogateStyle () {\n        let style = new PIXI.TextStyle ()\n\n        for (var key in this._input_style) {\n            switch (key) {\n                case 'color':\n                    style.fill = this._input_style.color\n                    break\n                case 'fontFamily':\n                case 'fontSize':\n                case 'fontWeight':\n                case 'fontVariant':\n                case 'fontStyle':\n                    style[key] = this._input_style[key]\n                    break\n                case 'letterSpacing':\n                    style.letterSpacing = parseFloat (this._input_style.letterSpacing)\n                    break\n            }\n        }\n\n        if (this._multiline) {\n            style.lineHeight = parseFloat (style.fontSize)\n            style.wordWrap = true\n            style.wordWrapWidth = this._getDOMInputBounds ().width\n        }\n\n        if (this._dom_input.value.length === 0)\n            style.fill = this._placeholderColor\n\n        return style\n    }\n\n    _deriveSurrogatePadding () {\n        let indent = this._input_style.textIndent ? parseFloat (this._input_style.textIndent) : 0\n\n        if (this._input_style.padding && this._input_style.padding.length > 0) {\n            let components = this._input_style.padding.trim ().split (' ')\n\n            if (components.length == 1) {\n                let padding = parseFloat (components[0])\n                return [padding, padding, padding, padding + indent]\n            } else if (components.length == 2) {\n                let paddingV = parseFloat (components[0])\n                let paddingH = parseFloat (components[1])\n                return [paddingV, paddingH, paddingV, paddingH + indent]\n            } else if (components.length == 4) {\n                let padding = components.map (component => {\n                    return parseFloat (component)\n                })\n                padding[3] += indent\n                return padding\n            }\n        }\n\n        return [0, 0, 0, indent]\n    }\n\n    _deriveSurrogateText () {\n        return this._dom_input.value.length === 0 ? this._placeholder : this._dom_input.value\n    }\n\n    _updateFontMetrics () {\n        const style = this._deriveSurrogateStyle ()\n        const font = style.toFontString ()\n\n        this._font_metrics = PIXI.TextMetrics.measureFont (font)\n    }\n\n\n    // CACHING OF INPUT BOX GRAPHICS\n\n    _buildBoxCache () {\n        this._destroyBoxCache ()\n\n        let states = ['DEFAULT', 'FOCUSED', 'DISABLED']\n        let input_bounds = this._getDOMInputBounds ()\n\n        for (let i in states) {\n            this._box_cache[states[i]] = this._box_generator (\n                input_bounds.width,\n                input_bounds.height,\n                states[i]\n            )\n        }\n\n        this._previous.input_bounds = input_bounds\n    }\n\n    _destroyBoxCache () {\n        if (this._box) {\n            this.removeChild (this._box)\n            this._box = null\n        }\n\n        for (let i in this._box_cache) {\n            this._box_cache[i].destroy ()\n            this._box_cache[i] = null\n            delete this._box_cache[i]\n        }\n    }\n\n\n    // HELPER FUNCTIONS\n\n    _hasFocus () {\n        return document.activeElement === this._dom_input\n    }\n\n    _setDOMInputVisible (visible) {\n        this._dom_input.style.display = visible ? 'block' : 'none'\n    }\n\n    _getCanvasBounds () {\n        let rect = this._last_renderer.view.getBoundingClientRect ()\n        let bounds = { top : rect.top, left : rect.left, width : rect.width, height : rect.height }\n        bounds.left += window.scrollX\n        bounds.top += window.scrollY\n        return bounds\n    }\n\n    _getDOMInputBounds () {\n        let remove_after = false\n\n        if (!this._dom_added) {\n            document.body.appendChild (this._dom_input)\n            remove_after = true\n        }\n\n        let org_transform = this._dom_input.style.transform\n        let org_display = this._dom_input.style.display\n        this._dom_input.style.transform = ''\n        this._dom_input.style.display = 'inline-block'\n        let bounds = this._dom_input.getBoundingClientRect ()\n        this._dom_input.style.transform = org_transform\n        this._dom_input.style.display = org_display\n\n        if (remove_after)\n            document.body.removeChild (this._dom_input)\n\n        return bounds\n    }\n\n    _getDOMRelativeWorldTransform () {\n        let canvas_bounds = this._last_renderer.view.getBoundingClientRect ()\n        let matrix = this.worldTransform.clone ()\n\n        matrix.scale (this._resolution, this._resolution)\n        matrix.scale (canvas_bounds.width / this._last_renderer.width,\n            canvas_bounds.height / this._last_renderer.height)\n        return matrix\n    }\n\n    _pixiMatrixToCSS (m) {\n        return 'matrix(' + [m.a, m.b, m.c, m.d, m.tx, m.ty].join (',') + ')'\n    }\n\n    _comparePixiMatrices (m1, m2) {\n        if (!m1 || !m2) return false\n        return (\n            m1.a == m2.a\n            && m1.b == m2.b\n            && m1.c == m2.c\n            && m1.d == m2.d\n            && m1.tx == m2.tx\n            && m1.ty == m2.ty\n        )\n    }\n\n    _compareClientRects (r1, r2) {\n        if (!r1 || !r2) return false\n        return (\n            r1.left == r2.left\n            && r1.top == r2.top\n            && r1.width == r2.width\n            && r1.height == r2.height\n        )\n    }\n}\n\n\nfunction DefaultBoxGenerator (styles) {\n    styles = styles || { fill : 0xcccccc }\n\n    if (styles.default) {\n        styles.focused = styles.focused || styles.default\n        styles.disabled = styles.disabled || styles.default\n    } else {\n        let temp_styles = styles\n        styles = {}\n        styles.default = styles.focused = styles.disabled = temp_styles\n    }\n\n    return function (w, h, state) {\n        let style = styles[state.toLowerCase ()]\n        let box = new PIXI.Graphics ()\n\n        if (style.fill)\n            box.beginFill (style.fill)\n\n        if (style.stroke)\n            box.lineStyle (\n                style.stroke.width || 1,\n                style.stroke.color || 0,\n                style.stroke.alpha || 1\n            )\n\n        if (style.rounded)\n            box.drawRoundedRect (0, 0, w, h, style.rounded)\n        else\n            box.drawRect (0, 0, w, h)\n\n        box.endFill ()\n        box.closePath ()\n\n        return box\n    }\n}\n","import { Sprite, utils } from 'pixi.js'\n\n/**\n * An UI button object\n *\n * @class\n * @extends PIXI.utils.EventEmitter\n */\n\nexport class ButtonTexture extends utils.EventEmitter {\n    constructor (options) {\n        super (options);\n        this._options = options;\n        const _btn = new Sprite (options.textureButton);\n        _btn._btnMode = true;\n        _btn.anchor.set (options.anchor ? options.anchor : 0.5);\n        _btn.position.x = options.x;\n        _btn.position.y = options.y;\n        _btn.interactive = true;\n        _btn\n        // set the mousedown and touchstart callback...\n            .on ('mousedown', this.onButtonDown)\n            .on ('touchstart', this.onButtonDown)\n            // set the mouseup and touchend callback...\n            .on ('mouseup', this.onButtonUp)\n            .on ('touchend', this.onButtonUp)\n            .on ('mouseupoutside', this.onButtonUp)\n            .on ('touchendoutside', this.onButtonUp)\n            // set the mouseover callback...\n            .on ('mouseover', this.onButtonOver)\n            // set the mouseout callback...\n            .on ('mouseout', this.onButtonOut)\n        //  .on ('tap', this.onButtonDown)\n        //  .on ('click', this.onButtonDown)\n\n        this.button = _btn;\n    }\n\n    getButtonFace () {\n        return this.button;\n    }\n\n    onButtonDown () {\n        this.button.isdown = true;\n        this.emit (\"BUTTONDOWN\");\n        this.button.texture = this._options.textureButtonDown;\n        this.button.alpha = 1;\n        window.console.log (\"button down\")\n    }\n\n\n    onButtonUp () {\n        this.button.isdown = false;\n        if (this.button.isOver) {\n            this.emit (\"BUTTONCONFIRM\");\n            this.button.texture = this._options.textureButtonOver;\n        } else {\n            this.emit (\"BUTTONUP\");\n            this.button.texture = this._options.textureButton;\n        }\n        window.console.log (\"button up\")\n    }\n\n    onButtonOver () {\n        this.button.isOver = true;\n        this.emit (\"BUTTONOVER\");\n        if (this.button.isdown) {\n            return;\n        }\n        this.button.texture = this._options.textureButtonOver;\n    }\n\n    onButtonOut () {\n        this.button.isOver = false;\n        this.emit (\"BUTTONOUT\");\n        if (this.button.isdown) {\n            return;\n        }\n        this.button.texture = this._options.textureButton;\n    }\n\n}\n"],"names":["TextInput","PIXI.Container","[object Object]","styles","super","this","_input_style","Object","assign","position","background","border","outline","transformOrigin","lineHeight","rows","display","input","box","_box_generator","DefaultBoxGenerator","hasOwnProperty","_multiline","multiline","_box_cache","_previous","_dom_added","_dom_visible","_placeholder","_placeholderColor","_selection","_restrict_value","_createDOMInput","substituteText","_setState","_addListeners","_substituted","substitute","_createSurrogate","_destroySurrogate","placeholder","_update","text","_updateSurrogate","_dom_input","disabled","_disabled","maxLength","_max_length","length","setAttribute","restrict","_restrict_regex","regex","RegExp","toString","slice","charAt","value","htmlInput","dom_visible","_setDOMInputVisible","focus","blur","select","key","style","_updateFontMetrics","_last_renderer","options","remove","_destroyBoxCache","destroy","document","createElement","resize","type","spellcheck","once","_onAdded","bind","_onRemoved","addEventListener","_onInputInput","_onInputKeyDown","_onInputKeyUp","_onFocused","_onBlurred","e","body","appendChild","overflow","keyCode","preventDefault","selectionStart","selectionEnd","emit","_updateSubstitution","requestAnimationFrame","parent","state","_updateBox","renderer","renderWebGL","_renderInternal","renderCanvas","render","_resolution","resolution","_canvas_bounds","_getCanvasBounds","_needsUpdate","_updateDOMInput","_needsNewBoxCache","_buildBoxCache","_box","removeChild","addChildAt","_surrogate","visible","top","left","transform","_pixiMatrixToCSS","_getDOMRelativeWorldTransform","opacity","worldAlpha","worldVisible","canvas_bounds","world_transform","worldTransform","clone","world_alpha","world_visible","test","setSelectionRange","_comparePixiMatrices","_compareClientRects","input_bounds","_getDOMInputBounds","width","height","_surrogate_hitbox","PIXI.Graphics","alpha","interactive","cursor","on","_onSurrogateFocus","addChild","_surrogate_mask","PIXI.Text","mask","padding","_deriveSurrogatePadding","_deriveSurrogateStyle","Math","max","apply","y","x","_deriveSurrogateText","_updateSurrogateHitbox","_updateSurrogateMask","bounds","clear","beginFill","drawRect","endFill","setTimeout","_ensureFocus","_hasFocus","PIXI.TextStyle","fill","color","letterSpacing","parseFloat","fontSize","wordWrap","wordWrapWidth","indent","textIndent","components","trim","split","paddingV","paddingH","map","component","font","toFontString","_font_metrics","PIXI.TextMetrics","measureFont","states","i","activeElement","rect","view","getBoundingClientRect","window","scrollX","scrollY","remove_after","org_transform","org_display","matrix","scale","m","a","b","c","d","tx","ty","join","m1","m2","r1","r2","default","focused","temp_styles","w","h","toLowerCase","stroke","lineStyle","rounded","drawRoundedRect","closePath","ButtonTexture","utils","EventEmitter","_options","_btn","Sprite","textureButton","_btnMode","anchor","set","onButtonDown","onButtonUp","onButtonOver","onButtonOut","button","isdown","texture","textureButtonDown","console","log","isOver","textureButtonOver"],"mappings":"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"}